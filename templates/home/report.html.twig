{% extends 'base.html.twig' %}

{% block title %}Report{% endblock %}

{% block body %}
<article>
    <h1>Redovisning av kursmoment i kursen Objektorienterade webbteknologier</h1>

    <section>
    <h2>Kmom01</h2>
    <p>
        <br><br>
        Jag har tidigare studerat objektorientering under min utbildning och har erfarenhet av att arbeta med objektorienterad programmering i Python och lite C#.
        <br><br>
        PHPs modell för klasser och objekt liknar mycket det som används i andra objektorienterade språk, såsom Python och C#.
        För att komma igång och skapa sina första klasser i PHP behöver man förstå begrepp som egenskaper, metoder, inkapsling och arv.
        <br><br>
        Kodbasen för uppgiften me/report var relativt enkel och följde en MVC-struktur med Twig som template engine.
        Strukturen var logiskt uppdelad i separata mappar för modeller, vyer och kontroller.
        <br><br>
        Artikeln "PHP The Right Way" ger en bra överblick över hur man kan arbeta med PHP på ett professionellt sätt.
        Jag tycker särskilt att delarna om felhantering, databasåtkomst och pakethantering är intressanta och värdefulla.
        Jag skulle vilja fördjupa mig mer inom dessa områden för att kunna förbättra mina kunskaper inom PHP.
        <br><br>
        Min TIL för detta kmom är hur man kan använda Symfony och Twig tillsammans för att skapa webbapplikationer med PHP.
        <br><br>
    </p>
    </section>

    <section>
    <h2>Kmom02</h2>
    <p>
        <br><br>
        I detta kursmoment har vi utforskat objektorienterade konstruktioner i PHP, såsom arv, komposition,
        interface och trait, samt arbetat med Symfony och MVC-arkitektur.
        Här följer en kort förklaring av dessa koncept och hur de används i PHP:
        <br><br>
        1. Arv: Arv innebär att en klass kan ärva egenskaper och metoder från en annan klass.
        Detta används för att skapa en hierarki av klasser där en underklass kan utöka eller specialisera en överklass.
        I PHP används extends-nyckelordet för att skapa arv.
        <br><br>
        2. Komposition: Komposition är ett sätt att bygga komplexa objekt genom att kombinera enkla objekt.
        Det innebär att en klass har en eller flera instanser av andra klasser som attribut.
        Komposition används för att skapa modularitet och återanvändning av kod.
        <br><br>
        3. Interface: Interface definierar en kontrakt för vilka metoder en klass måste implementera.
        Det garanterar att en klass som implementerar ett interface har vissa metoder med vissa signaturer.
        I PHP används implements-nyckelordet för att implementera ett interface.
        <br><br>
        4. Trait: Traits är en mekanism för att återanvända kod i PHP genom att inkapsla
        återanvändbara metoder i separata enheter som kan inkluderas i flera klasser.
        Traits används för att dela gemensam funktionalitet mellan klasser utan att använda arv.
        <br><br>
        Under uppgiften implementerade jag ett kortspel med hjälp av klasser och objektorienterade konstruktioner.
        Jag är nöjd med min implementation, men det finns alltid utrymme för förbättringar.
        Jag skulle kunna strukturera koden ännu bättre och göra den mer lättläst och underhållbar.
        <br><br>
        Arbetet med Symfony och MVC-arkitektur har gett mig en djupare förståelse för hur man kan strukturera en webbapplikation.
        Det har varit intressant att se hur Symfony hjälper till att separera ansvarsområden mellan modell, vy och kontroller.
        Detta gör att koden blir mer organiserad och lättare att underhålla.
        <br><br>
        Min TIL (Today I Learned) för detta kursmoment är hur man kan använda objektorienterade konstruktioner i PHP för att skapa modulär och återanvändbar kod.
        Jag har också lärt mig hur Symfony och MVC-arkitektur kan användas för att bygga välstrukturerade webbapplikationer.
        <br><br>
    </p>
    </section>

    <section>
    <h2>Kmom03</h2>
    <p>
    Att modellera ett kortspel med hjälp av flödesdiagram och pseudokod var både utmanande och givande. Detta verktyg erbjöd en visuell representation av problemet som hjälpte till att klargöra och förstå problemets komplexitet innan kodning började. Jag tror att denna metod kan vara mycket effektiv för att förbättra problemlösningsprocessen, eftersom det tvingar oss att tänka igenom hela applikationens flöde innan vi skriver den första koden. På detta sätt blir kodstrukturen mer genomtänkt och logisk, vilket minskar risken för misstag och missförstånd längre fram i utvecklingsprocessen.
    <br><br>
    När det gäller implementationen av uppgiften, valde jag att skapa olika klasser för att representera olika delar av spelet, såsom spelaren, dealern och kortleken. Jag är i stort sett nöjd med resultatet, även om jag inser att det finns rum för förbättringar. Specifikt skulle jag vilja förbättra koden för att göra den mer återanvändbar och underhållbar. Till exempel kan vissa metoder i mina klasser vara mer generella för att kunna hantera fler olika typer av kortspel, inte bara Blackjack.
    <br><br>
    Att koda i Symfony är en ny upplevelse för mig, men jag tycker att det har gått bra hittills. Ramverket är kraftfullt och erbjuder en hel del flexibilitet, vilket gör det möjligt att bygga komplexa applikationer med mindre ansträngning jämfört med att koda allt från grunden. Men det kräver också en del tid att lära sig ramverkets koncept och struktur.
    <br><br>
    Min TIL (Today I Learned) för detta kursmoment var att förstå hur man använder flödesdiagram och pseudokod för att modellera ett problem innan kodning börjar. Detta var en viktig insikt för mig, eftersom det inte bara hjälpte mig att strukturera koden bättre, utan också förbättrade min allmänna problemlösningsförmåga. Framöver kommer jag definitivt att använda dessa verktyg mer i mitt arbete.
    </p>
    </section>

    <section>
    <h2>Kmom04</h2>
    <p>
    </p>
    </section>

    <section>
    <h2>Kmom05</h2>
    <p>
    </p>
    </section>

    <section>
    <h2>Kmom06</h2>
    <p>
    </p>
    </section>

    <section>
    <h2>Kmom07-10</h2>
    <p>
    </p>
    </section>
{% endblock %}
