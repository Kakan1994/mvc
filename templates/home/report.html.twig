{% extends 'base.html.twig' %}

{% block title %}Report{% endblock %}

{% block body %}
<article>
    <h1>Redovisning av kursmoment i kursen Objektorienterade webbteknologier</h1>

    <section>
    <h2>Kmom01</h2>
    <p>
        Jag har tidigare studerat objektorientering under min utbildning och har erfarenhet av att arbeta med objektorienterad programmering i Python och lite C#.
        <br><br>
        PHPs modell för klasser och objekt liknar mycket det som används i andra objektorienterade språk, såsom Python och C#.
        För att komma igång och skapa sina första klasser i PHP behöver man förstå begrepp som egenskaper, metoder, inkapsling och arv.
        <br><br>
        Kodbasen för uppgiften me/report var relativt enkel och följde en MVC-struktur med Twig som template engine.
        Strukturen var logiskt uppdelad i separata mappar för modeller, vyer och kontroller.
        <br><br>
        Artikeln "PHP The Right Way" ger en bra överblick över hur man kan arbeta med PHP på ett professionellt sätt.
        Jag tycker särskilt att delarna om felhantering, databasåtkomst och pakethantering är intressanta och värdefulla.
        Jag skulle vilja fördjupa mig mer inom dessa områden för att kunna förbättra mina kunskaper inom PHP.
        <br><br>
        Min TIL för detta kmom är hur man kan använda Symfony och Twig tillsammans för att skapa webbapplikationer med PHP.
        <br><br>
    </p>
    </section>

    <section>
    <h2>Kmom02</h2>
    <p>
        I detta kursmoment har vi utforskat objektorienterade konstruktioner i PHP, såsom arv, komposition,
        interface och trait, samt arbetat med Symfony och MVC-arkitektur.
        Här följer en kort förklaring av dessa koncept och hur de används i PHP:
        <br><br>
        1. Arv: Arv innebär att en klass kan ärva egenskaper och metoder från en annan klass.
        Detta används för att skapa en hierarki av klasser där en underklass kan utöka eller specialisera en överklass.
        I PHP används extends-nyckelordet för att skapa arv.
        <br><br>
        2. Komposition: Komposition är ett sätt att bygga komplexa objekt genom att kombinera enkla objekt.
        Det innebär att en klass har en eller flera instanser av andra klasser som attribut.
        Komposition används för att skapa modularitet och återanvändning av kod.
        <br><br>
        3. Interface: Interface definierar en kontrakt för vilka metoder en klass måste implementera.
        Det garanterar att en klass som implementerar ett interface har vissa metoder med vissa signaturer.
        I PHP används implements-nyckelordet för att implementera ett interface.
        <br><br>
        4. Trait: Traits är en mekanism för att återanvända kod i PHP genom att inkapsla
        återanvändbara metoder i separata enheter som kan inkluderas i flera klasser.
        Traits används för att dela gemensam funktionalitet mellan klasser utan att använda arv.
        <br><br>
        Under uppgiften implementerade jag ett kortspel med hjälp av klasser och objektorienterade konstruktioner.
        Jag är nöjd med min implementation, men det finns alltid utrymme för förbättringar.
        Jag skulle kunna strukturera koden ännu bättre och göra den mer lättläst och underhållbar.
        <br><br>
        Arbetet med Symfony och MVC-arkitektur har gett mig en djupare förståelse för hur man kan strukturera en webbapplikation.
        Det har varit intressant att se hur Symfony hjälper till att separera ansvarsområden mellan modell, vy och kontroller.
        Detta gör att koden blir mer organiserad och lättare att underhålla.
        <br><br>
        Min TIL (Today I Learned) för detta kursmoment är hur man kan använda objektorienterade konstruktioner i PHP för att skapa modulär och återanvändbar kod.
        Jag har också lärt mig hur Symfony och MVC-arkitektur kan användas för att bygga välstrukturerade webbapplikationer.
        <br><br>
    </p>
    </section>

    <section>
    <h2>Kmom03</h2>
    <p>
    Att modellera ett kortspel med hjälp av flödesdiagram och pseudokod var både utmanande och givande. Detta verktyg erbjöd en visuell representation av problemet som hjälpte till att klargöra och förstå problemets komplexitet innan kodning började. Jag tror att denna metod kan vara mycket effektiv för att förbättra problemlösningsprocessen, eftersom det tvingar oss att tänka igenom hela applikationens flöde innan vi skriver den första koden. På detta sätt blir kodstrukturen mer genomtänkt och logisk, vilket minskar risken för misstag och missförstånd längre fram i utvecklingsprocessen.
    <br><br>
    När det gäller implementationen av uppgiften, valde jag att skapa olika klasser för att representera olika delar av spelet, såsom spelaren, dealern och kortleken. Jag är i stort sett nöjd med resultatet, även om jag inser att det finns rum för förbättringar. Specifikt skulle jag vilja förbättra koden för att göra den mer återanvändbar och underhållbar. Till exempel kan vissa metoder i mina klasser vara mer generella för att kunna hantera fler olika typer av kortspel, inte bara Blackjack.
    <br><br>
    Att koda i Symfony är en ny upplevelse för mig, men jag tycker att det har gått bra hittills. Ramverket är kraftfullt och erbjuder en hel del flexibilitet, vilket gör det möjligt att bygga komplexa applikationer med mindre ansträngning jämfört med att koda allt från grunden. Men det kräver också en del tid att lära sig ramverkets koncept och struktur.
    <br><br>
    Min TIL (Today I Learned) för detta kursmoment var att förstå hur man använder flödesdiagram och pseudokod för att modellera ett problem innan kodning börjar. Detta var en viktig insikt för mig, eftersom det inte bara hjälpte mig att strukturera koden bättre, utan också förbättrade min allmänna problemlösningsförmåga. Framöver kommer jag definitivt att använda dessa verktyg mer i mitt arbete.
    <br><br>
    </p>
    </section>

    <section>
    <h2>Kmom04</h2>
    <p>
    Under detta kursmomentet har jag fått möjlighet att arbeta med PHPUnit, ett testramverk för PHP.
    Mitt inledande intryck av att skriva kod som testar annan kod var lite överväldigande.
    Det var en ganska ny erfarenhet att ha kod som granskar funktionen av annan kod, men jag har funnit det mycket lärorikt.
    <br><br>
    Allmänt sett, har jag funnit PHPUnit vara en kraftfull resurs. 
    Dess förmåga att upptäcka och peka ut fel och brister i koden är ovärderlig. 
    Det kan vara lite klurigt att ställa in och komma igång, men de fördelar det ger är det värt mödan.
    <br><br>
    När jag reflekterar över min kod ur ett "testbarhet"-perspektiv, inser jag att det finns rum för förbättringar.
    Vissa delar av koden var svårare att testa än andra, kanske på grund av hur de var strukturerade eller vilka beroenden de hade.
    Jag tror att refaktorering för att förenkla och avkoda vissa delar av koden skulle förbättra dess testbarhet.
    <br><br>
    Jag valde att göra små förändringar i min kod, främst för att förbättra läsbarheten.
    Jag gjorde inga större överhalningar, men jag funderar på att göra det i framtiden baserat på vad jag har lärt mig.
    <br><br>
    Ämnet "testbar kod" har fått mig att tänka på vad som gör kod "snygg" eller "ren".
    Testbar kod är ofta väl strukturerad, vilket underlättar förståelsen av vad koden gör.
    Det skulle jag säga är en indikator på "ren" kod.
    <br><br>
    Min "Today I Learned" (TIL) för detta kursmoment är att testning är en central del av modern programutveckling.
    Det är inte bara ett sätt att hitta fel, utan det kan också fungera som en vägledning för att skriva bättre kod.
    Med hjälp av PHPUnit har jag lärt mig att det är möjligt att skriva kod som effektivt kan granska och testa annan kod,
    vilket är en viktig färdighet som jag kommer att ta med mig i mitt framtida arbete.
    <br><br>
    </p>
    </section>

    <section>
    <h2>Kmom05</h2>
    <p>
    Detta kursmoment har varit en fortsatt givande övning i att fördjupa min förståelse för Symfony och Doctrine.
    Genom mina tidigare erfarenheter med dessa verktyg under kursens gång,
    har jag successivt blivit mer bekväm med att navigera i Symfony's robusta struktur
    och använder Doctrine's kraftfulla verktyg för att arbeta med databaser.
    Att applicera dessa kunskaper i en ny, mer komplex kontext,
    har ytterligare understrukit hur kraftfulla och flexibla dessa verktyg kan vara.
    <br><br>
    Min applikation är en enkel biblioteksapplikation för att hantera böcker.
    Jag tänkte mycket på användargränssnittet och försökte göra det så intuitivt och användarvänligt som möjligt.
    Jag ville att det skulle vara enkelt att lägga till, redigera och ta bort böcker från biblioteket.
    <br><br>
    Arbeta med ORM i CRUD gick mycket smidigare än jag förväntade mig.
    Jag har tidigare erfarenhet av att arbeta med SQL och jämfört med det, har ORM visat sig vara mer organiserat och effektivt.
    Med ORM kunde jag fokusera mer på objekten och deras relationer istället för att oroa mig för databasens detaljer.
    <br><br>
    Min uppfattning om ORM hittills är mycket positiv.
    Det är ett mycket kraftfullt verktyg för att arbeta med databaser.
    Det minimerar behovet av att skriva repetitiva SQL-kommandon och hjälper till att hålla koden DRY.
    Det hjälper också till att hålla applikationen säker från SQL-injektion eftersom det mesta av databasinteraktionen sköts av ORM.
    <br><br>
    Min TIL (Today I Learned) för detta kursmoment är hur effektivt det kan vara att arbeta med ORM som Doctrine.
    Det var en ögonöppnare för mig att se hur det kunde förenkla databasinteraktioner och göra koden mer läsbar och underhållbar.
    Jag ser fram emot att fortsätta använda och lära mig mer om ORM i framtida projekt.
    <br><br>
    </p>
    </section>

    <section>
    <h2>Kmom06</h2>
    <p>
    Efter att ha utforskat phpmetrics kan jag säga att det är ett imponerande verktyg för kodanalys. Jag uppskattade särskilt visualiseringarna som det erbjuder. Cyklomatisk komplexitet och instabilitetsdiagrammen var särskilt värdefulla då de gav en ögonblicksbild av hur strukturerad och underhållbar min kod är. Dessa insikter gav mig möjligheten att optimera min kod och undvika komplexa och otympliga strukturer.
    <br><br>
    Integreringen med Scrutinizer gick relativt smidigt. Dess utvärdering av kodkvalitet och kodtäckning ger en användbar indikator på prestanda och stabilitet i en kodbas. Efter det första bygget var jag nöjd med min kodkvalitet och kodtäckning, även om det alltid finns utrymme för förbättringar. Badges som visas på Scrutinizer är en bra visuell representation och hjälper till att snabbt förstå kodkvaliteten.
    <br><br>
    När det gäller min syn på kodkvalitet, ser jag det som en balans mellan flera faktorer. En bra kod bör inte bara utföra uppgiften korrekt, utan också vara läsbar, underhållbar och skalbar. Jag tror att badges kan visa kodkvalitet till viss del, men de kan inte helt och hållet ersätta en grundlig granskning eller testning. Trots det är de en bra utgångspunkt för att bedöma kvaliteten på en kodbas.
    <br><br>
    Mitt TIL (Today I Learned) för detta kmom är att det finns kraftfulla verktyg tillgängliga för att hjälpa till med kodanalys och kvalitetskontroll. Genom att använda verktyg som phpmetrics och Scrutinizer kan jag få en djupare förståelse för min kod och identifiera potentiella problem innan de blir kritiska. Dessutom har jag lärt mig värdefulla insikter om vikten av kodkvalitet och hur man bäst kan uppnå och upprätthålla den.
    </p>
    </section>

    <section>
    <h2>Kmom10</h2>
    <h3>
        <br><br>
        Introduktion
    </h3>
    <p>
        I detta slutprojekt har jag valt att göra ett Texas Hold'em pokerspel.
        Jag funderade först på att utveckla vidare mitt Black Jack spel från tidigare kursen men var osäker på om det skulle vara okej så valde att göra ett nytt spel istället.
        <br><br>
    </p>
    <h3>Krav 1-3</h3>
    <p>
        Jag började med att skapa en simpel flowchart för att få en överblick över spelet och dess olika delar. Denna har jag sedan råkat ta bort så kan tyvärr inte visa upp den.
        Detta gjorde att jag hade en bra grund att utgå ifrån när jag började koda.
        Efter det så gjorde jag en landningssida för spelet som även innehåller en kort beskrivning om spelet.
        <br><br>
        Jag valde att använda kort klasserna från tidigare i kursen och byggde vidare på dessa. 
        Om jag hade gjort om projektet hade jag nog valt att göra om kort klasserna så att dom hade varit mer anpassade för poker spelet.
        Jag började med att skapa en klass för att hantera dom olika händerna som kan uppstå i spelet. Denna klass blev ganska stor och komplex till en början.
        Så jag valde att refaktorera den och dela upp delar av dig i diverse hjälpklasser. Detta gjorde att koden blev mer lättläst och underhållbar.
        Kunde gjort mer men fick priotera min tid.
        <br><br>
        Jag önskar även jag hade varit bättre på att köra analysverktyg och enhets tester under projektets gång.
        Blev väldigt mycket nu i slutet så har inte hunnit med så mycket som jag hade velat.
        Har inte gjort några förbättringar utifrån analyserna, men har 99%+ kodtäckning på klasserna för projektet.
        Valde att inte göra några tester för kontrollerna då jag inte hade tid för det.
        Jag uppskattar att kursen har med analysverktyg och enhetstester då det är något jag behöver bli bättre på.
        <br><br>
        Jag har stylat spelet primärt med färgerna röd och svart, med inslag av grön och guld.
        Tycker dom färgerna är typiska för casino och kortspel.
        Precis som jag gjort tidigare i kursen så har jag använt mig av SASS för stylingen.
        <br><br>
        <br><br>
    </p>
    <h3>Genomförandet av projektet</h3>
    <p>
        Jag insåg snabbt i våras att jag inte skulle hinna med/ha energi att klart med kursen på våren då jag jobbade heltid samtidigt så valde att lägga det på is till min semester.
        Projektet tog mycket längre tid än jag hade tänkt mig då så jag fick prioritera bort en del saker. Men jag är nöjd med resultatet ändå.
        <br><br>
        Känner inte direkt att något specifikt har varit svårt i projektet. Men jag känner att jag lärt mig mycket av projektet. Framförallt hur man ska tänka vid skrivadet av 'Clean Code'.
        Jag tycker absolut att det är ett rimligt projekt för kursen. Det är inte för stort och inte för litet.
        <br><br>
        Även om jag har 99%+ kodtäckning på klasserna så hade jag kunnat göra testerna bättre och mer robusta.
        En annan förbättring som jag kan tänka mig är att möjliggöra att gå all-in i spelet.
        Tänkte inkludera det men när jag insåg att det skulle kräva en hel del ändringar i koden så valde jag att inte göra det.
        <br><br>
        Precis som det stod på förslagssidan så var detta ett utmanande projekt.
        <br><br>
        <br><br>
    </p>
    <h3>Tankar om kursen</h3>
    <p>
        Jag märkte att kursen var mer avancerad än tidigare kurser under året. Kursen krävde mycket mer tid och energi än tidigare kurser, så det gick inte att göra den parallellt med jobbet.
        Nu i höst så går jag ner i tid på jobbet så jag hoppas att jag ska kunna klara av att göra kommande kurser parallellt med jobbet.
        <br><br>
        I det stora hela tycker jag kursen var väldigt bra. Jag har lärt mig mycket och känner att jag har utvecklats mycket som utvecklare.
        Men precis som i tidigare kurser tycker jag inte om redovisningarna för samtliga kursmoment.
        Jag ger kursen 7 av 10 och hade rekommenderat den och även hela programmet till andra.
    </p>
    </section>
{% endblock %}
