<?php

namespace ContainerDNHp8fj;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_ServiceLocator_WtlrZrbService extends App_KernelTestDebugContainer
{
    /**
     * Gets the private '.service_locator.wtlrZrb' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->privates['.service_locator.wtlrZrb'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Controller\\ApiController::getBookByIsbn' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\ApiController::getBooks' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController::add' => ['privates', '.service_locator.GQZbvNR', 'get_ServiceLocator_GQZbvNRService', true],
            'App\\Controller\\LibraryController::delete' => ['privates', '.service_locator.nLzTFMn', 'get_ServiceLocator_NLzTFMnService', true],
            'App\\Controller\\LibraryController::redirectBook' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController::update' => ['privates', '.service_locator.nLzTFMn', 'get_ServiceLocator_NLzTFMnService', true],
            'App\\Controller\\LibraryController::viewBook' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController::viewBooks' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Kernel::loadRoutes' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'App\\Kernel::registerContainerConfiguration' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel::loadRoutes' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel::registerContainerConfiguration' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'App\\Controller\\ApiController:getBookByIsbn' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\ApiController:getBooks' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController:add' => ['privates', '.service_locator.GQZbvNR', 'get_ServiceLocator_GQZbvNRService', true],
            'App\\Controller\\LibraryController:delete' => ['privates', '.service_locator.nLzTFMn', 'get_ServiceLocator_NLzTFMnService', true],
            'App\\Controller\\LibraryController:redirectBook' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController:update' => ['privates', '.service_locator.nLzTFMn', 'get_ServiceLocator_NLzTFMnService', true],
            'App\\Controller\\LibraryController:viewBook' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'App\\Controller\\LibraryController:viewBooks' => ['privates', '.service_locator.TBgEv1t', 'get_ServiceLocator_TBgEv1tService', true],
            'kernel:loadRoutes' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
            'kernel:registerContainerConfiguration' => ['privates', '.service_locator.xUrKPVU', 'get_ServiceLocator_XUrKPVUService', true],
        ], [
            'App\\Controller\\ApiController::getBookByIsbn' => '?',
            'App\\Controller\\ApiController::getBooks' => '?',
            'App\\Controller\\LibraryController::add' => '?',
            'App\\Controller\\LibraryController::delete' => '?',
            'App\\Controller\\LibraryController::redirectBook' => '?',
            'App\\Controller\\LibraryController::update' => '?',
            'App\\Controller\\LibraryController::viewBook' => '?',
            'App\\Controller\\LibraryController::viewBooks' => '?',
            'App\\Kernel::loadRoutes' => '?',
            'App\\Kernel::registerContainerConfiguration' => '?',
            'kernel::loadRoutes' => '?',
            'kernel::registerContainerConfiguration' => '?',
            'App\\Controller\\ApiController:getBookByIsbn' => '?',
            'App\\Controller\\ApiController:getBooks' => '?',
            'App\\Controller\\LibraryController:add' => '?',
            'App\\Controller\\LibraryController:delete' => '?',
            'App\\Controller\\LibraryController:redirectBook' => '?',
            'App\\Controller\\LibraryController:update' => '?',
            'App\\Controller\\LibraryController:viewBook' => '?',
            'App\\Controller\\LibraryController:viewBooks' => '?',
            'kernel:loadRoutes' => '?',
            'kernel:registerContainerConfiguration' => '?',
        ]);
    }
}
